Emit colors in GCC diagnostics when running under MinTTY

From: J.M. Eubank <john@thesnappy.net>

From
   <https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-gcc/0140-gcc-8.2.0-diagnostic-color.patch>

# HG changeset patch
# Parent  38180a9dd44ceb2ff011528c3664cf78c7eef57f
---
 gcc/diagnostic-color.c |   40 +++++++++++++++++++++++++++++++++++++++-
 1 file changed, 39 insertions(+), 1 deletion(-)

diff --git a/gcc/diagnostic-color.c b/gcc/diagnostic-color.c
index b1baded2c..c1ea1831a 100644
--- a/gcc/diagnostic-color.c
+++ b/gcc/diagnostic-color.c
@@ -23,6 +23,11 @@
 
 #ifdef __MINGW32__
 #  include <windows.h>
+#  ifdef __MINGW32_VERSION /* MinGW.org */
+#    include <ddk/ntifs.h>
+#  else /* MinGW-w64 */
+#    include <winternl.h>
+#  endif
 #endif
 
 #include "color-macros.h"
@@ -211,9 +216,42 @@ should_colorize (void)
   HANDLE h;
   DWORD m;
 
+  bool ret = false;
   h = GetStdHandle (STD_ERROR_HANDLE);
-  return (h != INVALID_HANDLE_VALUE) && (h != NULL)
+  ret = (h != INVALID_HANDLE_VALUE) && (h != NULL)
 	  && GetConsoleMode (h, &m);
+  if (!ret){
+    HMODULE ntdll = GetModuleHandle ("ntdll.dll");
+    if (ntdll != INVALID_HANDLE_VALUE){
+
+      typedef NTSTATUS NTAPI func_NtQueryObject (HANDLE, OBJECT_INFORMATION_CLASS,
+                                             PVOID, ULONG, PULONG);
+      func_NtQueryObject *fNtQueryObject =
+       (func_NtQueryObject*) GetProcAddress (ntdll, "NtQueryObject");
+      if (fNtQueryObject){
+
+        ULONG s = 0xffff * sizeof (WCHAR);
+        OBJECT_NAME_INFORMATION *oni = (OBJECT_NAME_INFORMATION*) xmalloc (s);
+        ULONG len;
+        /* mintty uses a named pipe like "ptyNNNN-to-master".  */
+        if (!fNtQueryObject (h, ObjectNameInformation, oni, s, &len))
+          {
+            wchar_t namedPipe[] = L"\\Device\\NamedPipe\\";
+            size_t l1 = sizeof (namedPipe) / 2 - 1;
+            wchar_t toMaster[] = L"-to-master";
+            size_t l2 = sizeof (toMaster) / 2 - 1;
+            USHORT name_length = oni->Name.Length / 2;
+            if (name_length > l1 + l2 &&
+                !memcmp (oni->Name.Buffer, namedPipe, l1 * 2) &&
+                !memcmp (oni->Name.Buffer + (name_length - l2), toMaster, l2 * 2))
+                ret = true;
+          }
+
+        free (oni);
+      }
+    }
+  }
+  return ret;
 #else
   char const *t = getenv ("TERM");
   /* emacs M-x shell sets TERM="dumb".  */
